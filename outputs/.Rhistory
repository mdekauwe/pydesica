imp <- vector(length = length(pfts)) #initialise
for (i in 1:length(pfts)) {
fname <- sprintf("%s_trait_sens_OAT.csv", pfts[i])
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
imp[k] <-  rel_imp$lmg
}
imp <- vector(length = length(pfts)) #initialise
for (i in 1:length(pfts)) {
fname <- sprintf("%s_trait_sens_OAT.csv", pfts[i])
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
imp[i] <-  rel_imp$lmg
}
imp
imp
setwd("/Users/mdekauwe/src/python/pydesica/outputs")
pfts <- c("rf", "wsf", "dsf", "grw", "saw")
vars <- c("gmin","lai", "p50", "depth", "Cl", "Cs")
imp <- matrix(nrow=length(pfts), ncol=length(vars))
for (i in 1:length(pfts)) {
fname <- sprintf("%s_trait_sens_OAT.csv", pfts[i])
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
imp[i,] <-  rel_imp$lmg
}
imp
setwd("/Users/mdekauwe/src/python/pydesica/outputs")
pfts <- c("rf", "wsf", "dsf", "grw", "saw")
vars <- c("gmin","lai", "p50", "depth", "Cl", "Cs")
all <- matrix(nrow=length(pfts), ncol=length(vars))
for (i in 1:length(pfts)) {
fname <- sprintf("%s_trait_sens_OAT.csv", pfts[i])
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
all[i,] <-  rel_imp$lmg
}
all
colnames(all) <- c("pft","gmin","lai","p50","depth","Cl","Cs")
all <- cbind.data.frame(pfts, all)
all
colnames(all) <- c("pft","gmin","lai","p50","depth","Cl","Cs")
all
#!/usr/bin/Rscript
library(visreg)
library(ggplot2)
library(ppcor)
library(relaimpo)
library(tidyverse)
setwd("/Users/mdekauwe/src/python/pydesica/outputs")
pfts <- c("rf", "wsf", "dsf", "grw", "saw")
vars <- c("gmin","lai", "p50", "depth", "Cl", "Cs")
all <- matrix(nrow=length(pfts), ncol=length(vars))
for (i in 1:length(pfts)) {
fname <- sprintf("%s_trait_sens_OAT.csv", pfts[i])
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
all[i,] <-  rel_imp$lmg
}
all <- cbind.data.frame(pfts, all)
colnames(all) <- c("pft","gmin","lai","p50","depth","Cl","Cs")
write.csv(all,"rel_imp.csv", row.names=FALSE)
setwd("/Users/mdekauwe/src/python/pydesica/outputs")
pft = "rf"
fname <- sprintf("%s_trait_sens_OAT.csv", pft)
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs + cwd, data=df)
visreg(fit)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs + cwd, data=df)
visreg(fit)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
plot(rel_imp)
#!/usr/bin/Rscript
library(visreg)
library(ggplot2)
library(ppcor)
library(relaimpo)
library(tidyverse)
setwd("/Users/mdekauwe/src/python/pydesica/outputs")
pfts <- c("rf", "wsf", "dsf", "grw", "saw")
vars <- c("gmin","lai", "p50", "depth", "Cl", "Cs", "cwd")
all <- matrix(nrow=length(pfts), ncol=length(vars))
for (i in 1:length(pfts)) {
fname <- sprintf("%s_trait_sens_OAT.csv", pfts[i])
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs + cwd, data=df)
rel_imp <- calc.relimp(fit, type=c("lmg"), rela=TRUE)
all[i,] <-  rel_imp$lmg
}
all <- cbind.data.frame(pfts, all)
colnames(all) <- c("pft","gmin","lai","p50","depth","Cl","Cs","cwd")
write.csv(all,"rel_imp.csv", row.names=FALSE)
p50 <- -5
library(plantecophys)
#library(fitplc) # not needed?
source("functions.R")
# stem volume
#1000*11.45*mf^1.33 * (1/500) * 10^3 * 0.5 * 10^3 / 18
d <- desica(met=make_simdfr(Tmin=10, RH=30, ndays=200),
psil0=-1,
psist0=-0.5,
p50=-5,
psiv=-2.5,
sf=5,
sw0=0.4,
kpsat=1.5,
b=6,
gmin=10,
soildepth=1,
mf = 1,   # kg
LMA = 100, # g m-2
AL= mf / (LMA / 1000),  # m2
Cl=4000,   # mmol MPa-1
Cs=40000,
plcdead=88,
timestep=1*60,
stopsimdead=T)
dead_sim <- function()
plot_desica(d)
plot(cumsum(d$Jrs), type='l')
lines(cumsum(d$Eplant), col="red")
# somewhat arbitrary point where phase 2 begins?
# ks has dropped to 5% of plant conductance
# soil is now super limiting
x <- subset(d, ks < 0.05*max(kp))
with(d, plot(t, Eleaf, type='l'))
with(x, lines(t, Eleaf, col="red"))
# Random figures for ESA
p50 <- -5
s50 <- 30
psiv <- -2
sf <- 5
plot(1, type='n', xlim=c(0,abs(1.8*p50)), ylim=c(0,1),
ylab="Relative value",
xlab="Water potential (-MPa)")
curve(fsig_tuzet(-x, psiv=psiv, sf=sf), add=TRUE, col="blue2", lwd=2)
curve(1-fsig_hydr(x, SX=s50, PX=p50), add=TRUE, col="red2", lwd=2)
with(martin, plot(P50, Pgs50, pch=19, col=as.factor(Group),
xlim=c(-15,0), ylim=c(-5,0)))
abline(0,1)
ge <- read.csv("data/ge_R.csv")
plc <- read.csv("data/plc_R.csv")
eme_plc <- subset(plc, species == "Eme" & !is.na(PLC..))
f <- fitplc(eme_plc, varnames=c(PLC="PLC..", WP="Mpa"))
with(subset(ge, species == "Eme"),
plot(MPa, gssat/max(gssat),
pch=19, col="blue",
xlim=c(0,8)))
curve(fsig_tuzet(-x, psiv=-1.5, sf=8), add=TRUE, col="blue2", lwd=2)
with(eme_plc, points(Mpa, PLC.. / 100, pch=15, col="red"))
plot(f, add=T, what="PLC", multiplier=0.01,linecol="red2",linelwd=2,
plotPx=F, plotci=F,plotdata=F,px_ci="none")
baad_file <- "data/baad.rds"
if(!file.exists(baad_file)){
url <- "https://github.com/dfalster/baad/releases/download/v1.0.1/baad.rds"
download.file(url, baad_file, mode="wb")
}
baad <- readRDS(baad_file)$data
mss <- subset(baad, !is.na(m.ss))
with(mss, plot(log10(m.lf), log10(m.ss), pch=19, col=as.factor(studyName)))
library(smatr)
sfit <- sma(m.ss ~ m.lf * studyName, data=mss, log="xy")
plot(sfit, axes=FALSE, pch=19,
xlab="Leaf mass (kg)", ylab="Sapwood mass (kg)")
magicaxis::magaxis(side=1:2, unlog=1:2)
sfit0 <- sma(m.ss ~ m.lf, data=mss, log="xy")
coef(sfit0)
# Sapwood capacitance
m.lf <- 1   # kg
wood_dens <- 0.8  # g cm-3 = t m-3 = kg dm-3
pore_frac <- 0.6
cs <- 0.15  # RWC MPa-1  - specific capacitance
m.ss <- 11.2 * m.lf^1.33  # kg of sapwood
v.ss <- m.ss / wood_dens  # liters of sapwood volume (dm3)
Vs <- pore_frac * v.ss    # liters of water in saturated tree
Cs_l <- Vs * cs   # liters = kg MPa-1
Cs <- Cs_l * 1000 * 1/18 * 1000  # mmol MPa-1
# Leaf capacitance
# ???
LMA <- 100
LWA <- 200 # see roderick script, leaf water content per unit area (g m-2)
cl <- 0.1  # specific capacitance, RWC MPa-1. I don't know the value, so let's assume
# same as sapwood, based on Ximeng's comparison
Cl_g <- cl * LWA  # g m-2 MPa-1
Cl_m2 <- Cl_g * 1000 / 18  # mmol m-2 MPa-1
# using m.lf = 1 from above, and LMA=100, we get:
AL <- 1000 * m.lf / LMA
Cl <- Cl_m2 * AL
par(mar=c(5,4,1,1), tcl=0.2, mgp=c(4.5,0.4,0), cex.lab=1.2,
family="Gotham Narrow Book")
source("R/load.R")
martin <- read_excel("data/DataBase.xlsx", sheet=4)
names(martin)[6] <- "Pgs50"
# Make simulation dataframe (combinations of inputs)
# Sample psiv and p50 from Martin-StPaul
met <- make_simdfr(Tmin=10, RH=30, ndays=200)
mart <- martin[,c("P50","Pgs50")] %>% filter(!is.na(P50), !is.na(Pgs50))
mrt <- paste(mart[[1]], mart[[2]], sep="_")
p  <- expand.grid(comb=mrt, capac=seq(100000,150000, by=10000),
gmin=seq(5, 20, by=2.5), stringsAsFactors = FALSE)
m <- strsplit(p$comb, "_")
p$p50 <- as.numeric(sapply(m, "[", 1))
p$psiv <- as.numeric(sapply(m, "[", 2))
# run simulation for each row
g <- list()
for(i in seq_len(nrow(p))){
t1 <- proc.time()
g[[i]] <- try(desica(met,
p50=p$p50[i], psiv=p$psiv[i],
gmin=p$gmin[i],
Cl=0.1*p$capac[i],
Cs=0.9*p$capac[i]))
t2 <- proc.time()
elaps <- round((t2-t1)[3], 1)
cat(cyan("Simulation ") %+% chr(i) %+% cyan(" completed in ") %+% silver(chr(elaps)) %+% silver(" sec\n"))
}
saveRDS(g, "cache/sim.rds")
tims <- do.call(rbind, lapply(g, summarize_desica) ) %>% as.data.frame
res <- cbind(p, tims)
res <- subset(res, plcfinal > 88)
# Figure
# Test of Blackman et al. 2016
windows(8,4)
par(mar=c(5,4,1,1), tcl=0.2, mgp=c(4.5,0.4,0), cex.lab=1.2,
family="Gotham Narrow Book")
cols <- RColorBrewer::brewer.pal(7, "YlOrRd")
par(mar=c(4,4,1,1), tcl=0.2, mgp=c(2.2,0.4,0), cex.lab=1.2, mfrow=c(1,2))
with(res, plot(-10^-3*capac*p50/gmin, phase2, pch=21,
ylab="Time to death (Phase 2) (days)",
ylim=c(0,200),
xlim=c(0,500),
xlab=expression(C %.% P["50"] / g[min]),
bg=cols[cut(gmin,7)]))
#dev.copy2pdf(file="output/6a.pdf")
legend("topleft", c("5","20"), fill=cols[c(1,7)], title=expression(g[min]))
# Get rid of non-linearity
with(res, plot((-10^-3*capac*p50/(gmin^1.5))^0.5, phase2,
xlim=c(0,15),
ylab="Time to death (Phase 2) (days)",
xlab=expression( (C %.% P["50"] / g[min]^1.5)^0.5),
ylim=c(0,200),
pch=21, bg=cols[cut(gmin,7)]))
dev.copy2pdf(file="output/6b.pdf")
# Figure
library(ppcor)
library(extrafont)
part_1 <- pcor(res[,c("phase1","capac","p50","psiv","gmin")])
sens_1 <- sort(abs(part_1$estimate[1,-1]),T)
part_2 <- pcor(res[,c("phase2","capac","p50","psiv","gmin")])
sens_2 <- sort(abs(part_2$estimate[1,-1]),T)
labfun <- function(x){
if(length(x) > 1){
return(sapply(x, labfun))
}
switch(x,
gmin = expression(g[min]),
capac = "Capac",
p50 = expression(P[50]),
psiv = expression(Pgs[50]))
}
windows(8,4)
par(mfrow=c(1,2), family="Gotham Narrow Book", mar=c(3,4,3,1),
cex.axis=1.2)
barplot(sens_1, xlab="", ylab="Partial correlation", main="Phase 1", col="lightgrey",ylim=c(0,1),
names.arg=labfun(names(sens_1)))
barplot(sens_2, xlab="", ylab="Partial correlation", main="Phase 2", col="dimgrey",ylim=c(0,1),
names.arg=labfun(names(sens_2)))
dev.copy2pdf(file="output/7.pdf")
install.packages("extrafont")
source("R/load.R")
martin <- read_excel("data/DataBase.xlsx", sheet=4)
names(martin)[6] <- "Pgs50"
# Make simulation dataframe (combinations of inputs)
# Sample psiv and p50 from Martin-StPaul
met <- make_simdfr(Tmin=10, RH=30, ndays=200)
mart <- martin[,c("P50","Pgs50")] %>% filter(!is.na(P50), !is.na(Pgs50))
mrt <- paste(mart[[1]], mart[[2]], sep="_")
p  <- expand.grid(comb=mrt, capac=seq(100000,150000, by=10000),
gmin=seq(5, 20, by=2.5), stringsAsFactors = FALSE)
m <- strsplit(p$comb, "_")
p$p50 <- as.numeric(sapply(m, "[", 1))
p$psiv <- as.numeric(sapply(m, "[", 2))
# run simulation for each row
g <- list()
for(i in seq_len(nrow(p))){
t1 <- proc.time()
g[[i]] <- try(desica(met,
p50=p$p50[i], psiv=p$psiv[i],
gmin=p$gmin[i],
Cl=0.1*p$capac[i],
Cs=0.9*p$capac[i]))
t2 <- proc.time()
elaps <- round((t2-t1)[3], 1)
cat(cyan("Simulation ") %+% chr(i) %+% cyan(" completed in ") %+% silver(chr(elaps)) %+% silver(" sec\n"))
}
saveRDS(g, "cache/sim.rds")
tims <- do.call(rbind, lapply(g, summarize_desica) ) %>% as.data.frame
res <- cbind(p, tims)
res <- subset(res, plcfinal > 88)
# Figure
# Test of Blackman et al. 2016
windows(8,4)
par(mar=c(5,4,1,1), tcl=0.2, mgp=c(4.5,0.4,0), cex.lab=1.2,
family="Gotham Narrow Book")
cols <- RColorBrewer::brewer.pal(7, "YlOrRd")
par(mar=c(4,4,1,1), tcl=0.2, mgp=c(2.2,0.4,0), cex.lab=1.2, mfrow=c(1,2))
with(res, plot(-10^-3*capac*p50/gmin, phase2, pch=21,
ylab="Time to death (Phase 2) (days)",
ylim=c(0,200),
xlim=c(0,500),
xlab=expression(C %.% P["50"] / g[min]),
bg=cols[cut(gmin,7)]))
#dev.copy2pdf(file="output/6a.pdf")
legend("topleft", c("5","20"), fill=cols[c(1,7)], title=expression(g[min]))
# Get rid of non-linearity
with(res, plot((-10^-3*capac*p50/(gmin^1.5))^0.5, phase2,
xlim=c(0,15),
ylab="Time to death (Phase 2) (days)",
xlab=expression( (C %.% P["50"] / g[min]^1.5)^0.5),
ylim=c(0,200),
pch=21, bg=cols[cut(gmin,7)]))
dev.copy2pdf(file="output/6b.pdf")
# Figure
library(ppcor)
library(extrafont)
part_1 <- pcor(res[,c("phase1","capac","p50","psiv","gmin")])
sens_1 <- sort(abs(part_1$estimate[1,-1]),T)
part_2 <- pcor(res[,c("phase2","capac","p50","psiv","gmin")])
sens_2 <- sort(abs(part_2$estimate[1,-1]),T)
labfun <- function(x){
if(length(x) > 1){
return(sapply(x, labfun))
}
switch(x,
gmin = expression(g[min]),
capac = "Capac",
p50 = expression(P[50]),
psiv = expression(Pgs[50]))
}
windows(8,4)
par(mfrow=c(1,2), family="Gotham Narrow Book", mar=c(3,4,3,1),
cex.axis=1.2)
barplot(sens_1, xlab="", ylab="Partial correlation", main="Phase 1", col="lightgrey",ylim=c(0,1),
names.arg=labfun(names(sens_1)))
barplot(sens_2, xlab="", ylab="Partial correlation", main="Phase 2", col="dimgrey",ylim=c(0,1),
names.arg=labfun(names(sens_2)))
dev.copy2pdf(file="output/7.pdf")
source("R/load.R")
setwd("/Users/mdekauwe/src/R/desica")
ls
source("R/load.R")
martin <- read_excel("data/DataBase.xlsx", sheet=4)
names(martin)[6] <- "Pgs50"
metsub <- met[1:(2*96),]
r1 <- desica(metsub, p50=-4, psiv=-3,
gmin=10, Cl=0.1*150000,
Cs=0.9*150000)
#1
windows(6,5)
par(mar=c(4,4,1,1), tcl=0.2, mgp=c(2.2,0.4,0), cex.lab=1.2)
with(r1, plot(24*t/96, Eleaf*2.5,
xlab="Time (hours)",
ylab=expression(Water~flux~~(mmol~s^-1)),
type='l', ylim=c(0,40)))
with(r1, lines(24*t/96, Jrs, type='l', col="red", lty=5))
legend("topleft", c("Transpiration","Root water uptake"),
lty=c(1,5), col=c("black","red"))
dev.copy2pdf(file="output/1.pdf")
windows(6,5)
par(mar=c(4,4,1,1), tcl=0.2, mgp=c(2.2,0.4,0), cex.lab=1.2)
with(r1, plot(24*t/96, Eleaf*2.5,
xlab="Time (hours)",
ylab=expression(Water~flux~~(mmol~s^-1)),
type='l', ylim=c(0,40)))
with(r1, lines(24*t/96, Jrs, type='l', col="red", lty=5))
legend("topleft", c("Transpiration","Root water uptake"),
lty=c(1,5), col=c("black","red"))
dev.copy2pdf(file="output/1.pdf")
windows(6,5)
par(mar=c(4,4,1,1), tcl=0.2, mgp=c(2.2,0.4,0), cex.lab=1.2)
with(r1, plot(24*t/96, Eleaf*2.5,
xlab="Time (hours)",
ylab=expression(Water~flux~~(mmol~s^-1)),
type='l', ylim=c(0,40)))
with(r1, lines(24*t/96, Jrs, type='l', col="red", lty=5))
legend("topleft", c("Transpiration","Root water uptake"),
lty=c(1,5), col=c("black","red"))
metsub <- met[1:(2*96),]
r1 <- desica(metsub, p50=-4, psiv=-3,
gmin=10, Cl=0.1*150000,
Cs=0.9*150000)
setwd("/Users/mdekauwe/src/python/pydesica/outputs")
#pft = "wsf"
#fname <- sprintf("%s_trait_sensitivity.csv", pft)
#df <- read.csv(fname)
pft = "dsf"
fname <- sprintf("%s_trait_sens_OAT.csv", pft)
df <- read.csv(fname)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs + cwd, data=df)
visreg(fit)
visreg(fit, "lai")
visreg(fit, "p50")
visreg(fit, "Cl")
visreg(fit, "Cs")
visreg(fit, "depth")
dev.off()
visreg(fit)
df <- unique(df)
df <- df[df$day_of_death> 0]
df <- df[df$day_of_death> 0]
df[df$day_of_death> 0]
df[df$day_of_death> 0, ]
dfx <- df[df$day_of_death> 0, ]
length(dfx)
df <- unique(df)
df <- df[df$day_of_death> 0, ]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs + cwd, data=df)
visreg(fit)
pft = "grw"
fname <- sprintf("%s_trait_sens_OAT.csv", pft)
df <- read.csv(fname)
#head(df)
df <- unique(df)
df <- df[df$day_of_death> 0, ]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs + cwd, data=df)
visreg(fit)
df <- unique(df)
df <- df[df$day_of_death> 0, ]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
pcor(df[,c("lai","p50","depth","gmin")])
pcor(df[,c("gmin","lai","p50","depth","Cl","Cs")])
en <- sort(abs(x$estimate[1,-1]),T)
x < - pcor(df[,c("gmin","lai","p50","depth","Cl","Cs")])
en <- sort(abs(x$estimate[1,-1]),T)
x < - pcor(df[,c("gmin","lai","p50","depth","Cl","Cs")])
x <- pcor(df[,c("gmin","lai","p50","depth","Cl","Cs")])
en <- sort(abs(x$estimate[1,-1]),T)
en
sens_2 <- sort(abs(x$estimate[1,-1]),T)
labfun <- function(x){
if(length(x) > 1){
return(sapply(x, labfun))
}
switch(x,
gmin = expression(g[min]),
capac = "Capac",
p50 = expression(P[50]),
psiv = expression(Pgs[50]))
}
windows(8,4)
par(mfrow=c(1,2), family="Gotham Narrow Book", mar=c(3,4,3,1),
cex.axis=1.2)
barplot(sens_2, xlab="", ylab="Partial correlation", main="Phase 2", col="dimgrey",ylim=c(0,1),
names.arg=labfun(names(sens_2)))
windows(8,4)
par(mfrow=c(1,2), family="Times", mar=c(3,4,3,1),
cex.axis=1.2)
barplot(sens_2, xlab="", ylab="Partial correlation", main="Phase 2", col="dimgrey",ylim=c(0,1),
names.arg=labfun(names(sens_2)))
df <- unique(df)
df <- df[df$day_of_death> 0, ]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
visreg(fit, "p50")
visreg(fit, "Cl")
visreg(fit, "Cs")
visreg(fit, "depth")
dev.off()
par(mfrow=c(3,3))
visreg(fit, "gmin")
visreg(fit, "lai")
visreg(fit, "p50")
visreg(fit, "Cl")
visreg(fit, "Cs")
visreg(fit, "depth")
df
fname <- sprintf("%s_trait_sens_OAT.csv", pft)
df <- read.csv(fname)
#head(df)
df <- unique(df)
df <- df[df$day_of_death> 0, ]
df <- df[!duplicated(df)]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
df
df[!duplicated(df)]
df[!duplicated(df), ]
df <- unique(df)
df <- df[df$day_of_death> 0, ]
df <- df[!duplicated(df), ]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
dev.off()
df <- unique(df)
df <- df[df$day_of_death> 0, ]
df <- df[!duplicated(df), ]
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
df <- unique(df)
df <- df[df$day_of_death> 0, ]
#df <- df[!duplicated(df), ]
df <- unique(df)
fit <- lm(day_of_death ~ gmin + lai + p50 + depth + Cl + Cs, data=df)
visreg(fit)
